{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2f97e68d-b047-4b30-95bc-7fafb2b475a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "KeyError",
     "evalue": "\"Column(s) ['Price'] do not exist\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[2], line 33\u001b[0m\n\u001b[0;32m     29\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n\u001b[0;32m     31\u001b[0m \u001b[38;5;66;03m# Task 2: Lookalike Model\u001b[39;00m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;66;03m# Feature engineering\u001b[39;00m\n\u001b[1;32m---> 33\u001b[0m customer_features \u001b[38;5;241m=\u001b[39m merged_data\u001b[38;5;241m.\u001b[39mgroupby(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCustomerID\u001b[39m\u001b[38;5;124m\"\u001b[39m)\u001b[38;5;241m.\u001b[39magg({\n\u001b[0;32m     34\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTotalValue\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msum\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m     35\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTransactionID\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcount\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m     36\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPrice\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m     37\u001b[0m })\u001b[38;5;241m.\u001b[39mrename(columns\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTotalValue\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTotalSpend\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTransactionID\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTransactionCount\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPrice\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAvgPrice\u001b[39m\u001b[38;5;124m\"\u001b[39m})\n\u001b[0;32m     39\u001b[0m \u001b[38;5;66;03m# Compute similarity\u001b[39;00m\n\u001b[0;32m     40\u001b[0m scaler \u001b[38;5;241m=\u001b[39m StandardScaler()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\generic.py:1432\u001b[0m, in \u001b[0;36mDataFrameGroupBy.aggregate\u001b[1;34m(self, func, engine, engine_kwargs, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1429\u001b[0m     kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mengine_kwargs\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m engine_kwargs\n\u001b[0;32m   1431\u001b[0m op \u001b[38;5;241m=\u001b[39m GroupByApply(\u001b[38;5;28mself\u001b[39m, func, args\u001b[38;5;241m=\u001b[39margs, kwargs\u001b[38;5;241m=\u001b[39mkwargs)\n\u001b[1;32m-> 1432\u001b[0m result \u001b[38;5;241m=\u001b[39m op\u001b[38;5;241m.\u001b[39magg()\n\u001b[0;32m   1433\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_dict_like(func) \u001b[38;5;129;01mand\u001b[39;00m result \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   1434\u001b[0m     \u001b[38;5;66;03m# GH #52849\u001b[39;00m\n\u001b[0;32m   1435\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mas_index \u001b[38;5;129;01mand\u001b[39;00m is_list_like(func):\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:190\u001b[0m, in \u001b[0;36mApply.agg\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    187\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mapply_str()\n\u001b[0;32m    189\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_dict_like(func):\n\u001b[1;32m--> 190\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39magg_dict_like()\n\u001b[0;32m    191\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m is_list_like(func):\n\u001b[0;32m    192\u001b[0m     \u001b[38;5;66;03m# we require a list, but not a 'str'\u001b[39;00m\n\u001b[0;32m    193\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39magg_list_like()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:423\u001b[0m, in \u001b[0;36mApply.agg_dict_like\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    415\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21magg_dict_like\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m Series:\n\u001b[0;32m    416\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    417\u001b[0m \u001b[38;5;124;03m    Compute aggregation in the case of a dict-like argument.\u001b[39;00m\n\u001b[0;32m    418\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    421\u001b[0m \u001b[38;5;124;03m    Result of aggregation.\u001b[39;00m\n\u001b[0;32m    422\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 423\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39magg_or_apply_dict_like(op_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124magg\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:1608\u001b[0m, in \u001b[0;36mGroupByApply.agg_or_apply_dict_like\u001b[1;34m(self, op_name)\u001b[0m\n\u001b[0;32m   1603\u001b[0m     kwargs\u001b[38;5;241m.\u001b[39mupdate({\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mengine\u001b[39m\u001b[38;5;124m\"\u001b[39m: engine, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mengine_kwargs\u001b[39m\u001b[38;5;124m\"\u001b[39m: engine_kwargs})\n\u001b[0;32m   1605\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m com\u001b[38;5;241m.\u001b[39mtemp_setattr(\n\u001b[0;32m   1606\u001b[0m     obj, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas_index\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m, condition\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mhasattr\u001b[39m(obj, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas_index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   1607\u001b[0m ):\n\u001b[1;32m-> 1608\u001b[0m     result_index, result_data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcompute_dict_like(\n\u001b[0;32m   1609\u001b[0m         op_name, selected_obj, selection, kwargs\n\u001b[0;32m   1610\u001b[0m     )\n\u001b[0;32m   1611\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwrap_results_dict_like(selected_obj, result_index, result_data)\n\u001b[0;32m   1612\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:462\u001b[0m, in \u001b[0;36mApply.compute_dict_like\u001b[1;34m(self, op_name, selected_obj, selection, kwargs)\u001b[0m\n\u001b[0;32m    460\u001b[0m is_groupby \u001b[38;5;241m=\u001b[39m \u001b[38;5;28misinstance\u001b[39m(obj, (DataFrameGroupBy, SeriesGroupBy))\n\u001b[0;32m    461\u001b[0m func \u001b[38;5;241m=\u001b[39m cast(AggFuncTypeDict, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunc)\n\u001b[1;32m--> 462\u001b[0m func \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnormalize_dictlike_arg(op_name, selected_obj, func)\n\u001b[0;32m    464\u001b[0m is_non_unique_col \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    465\u001b[0m     selected_obj\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m\n\u001b[0;32m    466\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m selected_obj\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnunique() \u001b[38;5;241m<\u001b[39m \u001b[38;5;28mlen\u001b[39m(selected_obj\u001b[38;5;241m.\u001b[39mcolumns)\n\u001b[0;32m    467\u001b[0m )\n\u001b[0;32m    469\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m selected_obj\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m    470\u001b[0m     \u001b[38;5;66;03m# key only used for output\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:663\u001b[0m, in \u001b[0;36mApply.normalize_dictlike_arg\u001b[1;34m(self, how, obj, func)\u001b[0m\n\u001b[0;32m    661\u001b[0m     cols \u001b[38;5;241m=\u001b[39m Index(\u001b[38;5;28mlist\u001b[39m(func\u001b[38;5;241m.\u001b[39mkeys()))\u001b[38;5;241m.\u001b[39mdifference(obj\u001b[38;5;241m.\u001b[39mcolumns, sort\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(cols) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m--> 663\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mColumn(s) \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlist\u001b[39m(cols)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m do not exist\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    665\u001b[0m aggregator_types \u001b[38;5;241m=\u001b[39m (\u001b[38;5;28mlist\u001b[39m, \u001b[38;5;28mtuple\u001b[39m, \u001b[38;5;28mdict\u001b[39m)\n\u001b[0;32m    667\u001b[0m \u001b[38;5;66;03m# if we have a dict of any non-scalars\u001b[39;00m\n\u001b[0;32m    668\u001b[0m \u001b[38;5;66;03m# eg. {'A' : ['mean']}, normalize all to\u001b[39;00m\n\u001b[0;32m    669\u001b[0m \u001b[38;5;66;03m# be list-likes\u001b[39;00m\n\u001b[0;32m    670\u001b[0m \u001b[38;5;66;03m# Cannot use func.values() because arg may be a Series\u001b[39;00m\n",
      "\u001b[1;31mKeyError\u001b[0m: \"Column(s) ['Price'] do not exist\""
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import davies_bouldin_score\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Task 1: Exploratory Data Analysis (EDA)\n",
    "# Load the datasets\n",
    "customers = pd.read_csv(\"Customers.csv\")\n",
    "products = pd.read_csv(\"Products.csv\")\n",
    "transactions = pd.read_csv(\"Transactions.csv\")\n",
    "\n",
    "# Merge datasets for comprehensive analysis\n",
    "merged_data = transactions.merge(customers, on=\"CustomerID\").merge(products, on=\"ProductID\")\n",
    "\n",
    "# Basic EDA\n",
    "summary_stats = merged_data.describe()\n",
    "sales_by_region = merged_data.groupby(\"Region\")[\"TotalValue\"].sum()\n",
    "top_products = merged_data.groupby(\"ProductName\")[\"TotalValue\"].sum().sort_values(ascending=False).head(5)\n",
    "\n",
    "# Visualization (e.g., sales trends, region analysis)\n",
    "plt.figure(figsize=(10, 6))\n",
    "sales_by_region.plot(kind=\"bar\", title=\"Total Sales by Region\")\n",
    "plt.xlabel(\"Region\")\n",
    "plt.ylabel(\"Total Sales\")\n",
    "plt.show()\n",
    "\n",
    "# Task 2: Lookalike Model\n",
    "# Feature engineering\n",
    "customer_features = merged_data.groupby(\"CustomerID\").agg({\n",
    "    \"TotalValue\": \"sum\",\n",
    "    \"TransactionID\": \"count\",\n",
    "    \"Price\": \"mean\",\n",
    "}).rename(columns={\"TotalValue\": \"TotalSpend\", \"TransactionID\": \"TransactionCount\", \"Price\": \"AvgPrice\"})\n",
    "\n",
    "# Compute similarity\n",
    "scaler = StandardScaler()\n",
    "scaled_features = scaler.fit_transform(customer_features)\n",
    "similarity_matrix = cosine_similarity(scaled_features)\n",
    "\n",
    "# Recommend top 3 lookalikes for each customer\n",
    "lookalikes = {}\n",
    "customer_ids = customer_features.index.tolist()\n",
    "for i, customer_id in enumerate(customer_ids):\n",
    "    similar_indices = np.argsort(-similarity_matrix[i])[1:4]  # Top 3 excluding self\n",
    "    lookalikes[customer_id] = [\n",
    "        (customer_ids[j], round(similarity_matrix[i, j], 4)) for j in similar_indices\n",
    "    ]\n",
    "\n",
    "# Save Lookalike results\n",
    "lookalike_df = pd.DataFrame({\n",
    "    \"CustomerID\": list(lookalikes.keys()),\n",
    "    \"Lookalikes\": [str(v) for v in lookalikes.values()]\n",
    "})\n",
    "lookalike_df.to_csv(\"Lookalike.csv\", index=False)\n",
    "\n",
    "# Task 3: Customer Segmentation (Clustering)\n",
    "# Prepare data for clustering\n",
    "clustering_data = customer_features.copy()\n",
    "scaled_clustering_data = scaler.fit_transform(clustering_data)\n",
    "\n",
    "# Apply KMeans clustering\n",
    "kmeans = KMeans(n_clusters=4, random_state=42)\n",
    "clusters = kmeans.fit_predict(scaled_clustering_data)\n",
    "clustering_data[\"Cluster\"] = clusters\n",
    "\n",
    "# Evaluate clustering\n",
    "db_index = davies_bouldin_score(scaled_clustering_data, clusters)\n",
    "\n",
    "# Visualize clusters\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.scatterplot(\n",
    "    x=clustering_data[\"TotalSpend\"],\n",
    "    y=clustering_data[\"TransactionCount\"],\n",
    "    hue=clustering_data[\"Cluster\"],\n",
    "    palette=\"viridis\",\n",
    "    legend=\"full\"\n",
    ")\n",
    "plt.title(\"Customer Clusters\")\n",
    "plt.xlabel(\"Total Spend\")\n",
    "plt.ylabel(\"Transaction Count\")\n",
    "plt.show()\n",
    "\n",
    "# Save clustering results\n",
    "clustering_data.to_csv(\"ClusteringResults.csv\", index=False)\n",
    "\n",
    "# Print summaries for review\n",
    "print(\"EDA Summary Statistics:\\n\", summary_stats)\n",
    "print(\"Top 5 Products by Sales:\\n\", top_products)\n",
    "print(\"Davies-Bouldin Index for Clustering:\", db_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "df51c671-06f8-4e7c-8a79-ed5786f4921c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "KeyError",
     "evalue": "\"Column(s) ['Price'] do not exist\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[3], line 33\u001b[0m\n\u001b[0;32m     29\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n\u001b[0;32m     31\u001b[0m \u001b[38;5;66;03m# Task 2: Lookalike Model\u001b[39;00m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;66;03m# Feature engineering\u001b[39;00m\n\u001b[1;32m---> 33\u001b[0m customer_features \u001b[38;5;241m=\u001b[39m merged_data\u001b[38;5;241m.\u001b[39mgroupby(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCustomerID\u001b[39m\u001b[38;5;124m\"\u001b[39m)\u001b[38;5;241m.\u001b[39magg({\n\u001b[0;32m     34\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTotalValue\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msum\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m     35\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTransactionID\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcount\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m     36\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPrice\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m     37\u001b[0m })\u001b[38;5;241m.\u001b[39mrename(columns\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTotalValue\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTotalSpend\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTransactionID\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTransactionCount\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPrice\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAvgPrice\u001b[39m\u001b[38;5;124m\"\u001b[39m})\n\u001b[0;32m     39\u001b[0m \u001b[38;5;66;03m# Ensure features are numerical and handle missing values if any\u001b[39;00m\n\u001b[0;32m     40\u001b[0m customer_features \u001b[38;5;241m=\u001b[39m customer_features\u001b[38;5;241m.\u001b[39mfillna(\u001b[38;5;241m0\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\generic.py:1432\u001b[0m, in \u001b[0;36mDataFrameGroupBy.aggregate\u001b[1;34m(self, func, engine, engine_kwargs, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1429\u001b[0m     kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mengine_kwargs\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m engine_kwargs\n\u001b[0;32m   1431\u001b[0m op \u001b[38;5;241m=\u001b[39m GroupByApply(\u001b[38;5;28mself\u001b[39m, func, args\u001b[38;5;241m=\u001b[39margs, kwargs\u001b[38;5;241m=\u001b[39mkwargs)\n\u001b[1;32m-> 1432\u001b[0m result \u001b[38;5;241m=\u001b[39m op\u001b[38;5;241m.\u001b[39magg()\n\u001b[0;32m   1433\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_dict_like(func) \u001b[38;5;129;01mand\u001b[39;00m result \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   1434\u001b[0m     \u001b[38;5;66;03m# GH #52849\u001b[39;00m\n\u001b[0;32m   1435\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mas_index \u001b[38;5;129;01mand\u001b[39;00m is_list_like(func):\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:190\u001b[0m, in \u001b[0;36mApply.agg\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    187\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mapply_str()\n\u001b[0;32m    189\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_dict_like(func):\n\u001b[1;32m--> 190\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39magg_dict_like()\n\u001b[0;32m    191\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m is_list_like(func):\n\u001b[0;32m    192\u001b[0m     \u001b[38;5;66;03m# we require a list, but not a 'str'\u001b[39;00m\n\u001b[0;32m    193\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39magg_list_like()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:423\u001b[0m, in \u001b[0;36mApply.agg_dict_like\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    415\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21magg_dict_like\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m Series:\n\u001b[0;32m    416\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    417\u001b[0m \u001b[38;5;124;03m    Compute aggregation in the case of a dict-like argument.\u001b[39;00m\n\u001b[0;32m    418\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    421\u001b[0m \u001b[38;5;124;03m    Result of aggregation.\u001b[39;00m\n\u001b[0;32m    422\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 423\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39magg_or_apply_dict_like(op_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124magg\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:1608\u001b[0m, in \u001b[0;36mGroupByApply.agg_or_apply_dict_like\u001b[1;34m(self, op_name)\u001b[0m\n\u001b[0;32m   1603\u001b[0m     kwargs\u001b[38;5;241m.\u001b[39mupdate({\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mengine\u001b[39m\u001b[38;5;124m\"\u001b[39m: engine, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mengine_kwargs\u001b[39m\u001b[38;5;124m\"\u001b[39m: engine_kwargs})\n\u001b[0;32m   1605\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m com\u001b[38;5;241m.\u001b[39mtemp_setattr(\n\u001b[0;32m   1606\u001b[0m     obj, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas_index\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m, condition\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mhasattr\u001b[39m(obj, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas_index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   1607\u001b[0m ):\n\u001b[1;32m-> 1608\u001b[0m     result_index, result_data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcompute_dict_like(\n\u001b[0;32m   1609\u001b[0m         op_name, selected_obj, selection, kwargs\n\u001b[0;32m   1610\u001b[0m     )\n\u001b[0;32m   1611\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwrap_results_dict_like(selected_obj, result_index, result_data)\n\u001b[0;32m   1612\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:462\u001b[0m, in \u001b[0;36mApply.compute_dict_like\u001b[1;34m(self, op_name, selected_obj, selection, kwargs)\u001b[0m\n\u001b[0;32m    460\u001b[0m is_groupby \u001b[38;5;241m=\u001b[39m \u001b[38;5;28misinstance\u001b[39m(obj, (DataFrameGroupBy, SeriesGroupBy))\n\u001b[0;32m    461\u001b[0m func \u001b[38;5;241m=\u001b[39m cast(AggFuncTypeDict, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunc)\n\u001b[1;32m--> 462\u001b[0m func \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnormalize_dictlike_arg(op_name, selected_obj, func)\n\u001b[0;32m    464\u001b[0m is_non_unique_col \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    465\u001b[0m     selected_obj\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m\n\u001b[0;32m    466\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m selected_obj\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnunique() \u001b[38;5;241m<\u001b[39m \u001b[38;5;28mlen\u001b[39m(selected_obj\u001b[38;5;241m.\u001b[39mcolumns)\n\u001b[0;32m    467\u001b[0m )\n\u001b[0;32m    469\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m selected_obj\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m    470\u001b[0m     \u001b[38;5;66;03m# key only used for output\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:663\u001b[0m, in \u001b[0;36mApply.normalize_dictlike_arg\u001b[1;34m(self, how, obj, func)\u001b[0m\n\u001b[0;32m    661\u001b[0m     cols \u001b[38;5;241m=\u001b[39m Index(\u001b[38;5;28mlist\u001b[39m(func\u001b[38;5;241m.\u001b[39mkeys()))\u001b[38;5;241m.\u001b[39mdifference(obj\u001b[38;5;241m.\u001b[39mcolumns, sort\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(cols) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m--> 663\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mColumn(s) \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlist\u001b[39m(cols)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m do not exist\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    665\u001b[0m aggregator_types \u001b[38;5;241m=\u001b[39m (\u001b[38;5;28mlist\u001b[39m, \u001b[38;5;28mtuple\u001b[39m, \u001b[38;5;28mdict\u001b[39m)\n\u001b[0;32m    667\u001b[0m \u001b[38;5;66;03m# if we have a dict of any non-scalars\u001b[39;00m\n\u001b[0;32m    668\u001b[0m \u001b[38;5;66;03m# eg. {'A' : ['mean']}, normalize all to\u001b[39;00m\n\u001b[0;32m    669\u001b[0m \u001b[38;5;66;03m# be list-likes\u001b[39;00m\n\u001b[0;32m    670\u001b[0m \u001b[38;5;66;03m# Cannot use func.values() because arg may be a Series\u001b[39;00m\n",
      "\u001b[1;31mKeyError\u001b[0m: \"Column(s) ['Price'] do not exist\""
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import davies_bouldin_score\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Task 1: Exploratory Data Analysis (EDA)\n",
    "# Load the datasets\n",
    "customers = pd.read_csv(\"Customers.csv\")\n",
    "products = pd.read_csv(\"Products.csv\")\n",
    "transactions = pd.read_csv(\"Transactions.csv\")\n",
    "\n",
    "# Merge datasets for comprehensive analysis\n",
    "merged_data = transactions.merge(customers, on=\"CustomerID\").merge(products, on=\"ProductID\")\n",
    "\n",
    "# Basic EDA\n",
    "summary_stats = merged_data.describe()\n",
    "sales_by_region = merged_data.groupby(\"Region\")[\"TotalValue\"].sum()\n",
    "top_products = merged_data.groupby(\"ProductName\")[\"TotalValue\"].sum().sort_values(ascending=False).head(5)\n",
    "\n",
    "# Visualization (e.g., sales trends, region analysis)\n",
    "plt.figure(figsize=(10, 6))\n",
    "sales_by_region.plot(kind=\"bar\", title=\"Total Sales by Region\")\n",
    "plt.xlabel(\"Region\")\n",
    "plt.ylabel(\"Total Sales\")\n",
    "plt.show()\n",
    "\n",
    "# Task 2: Lookalike Model\n",
    "# Feature engineering\n",
    "customer_features = merged_data.groupby(\"CustomerID\").agg({\n",
    "    \"TotalValue\": \"sum\",\n",
    "    \"TransactionID\": \"count\",\n",
    "    \"Price\": \"mean\"\n",
    "}).rename(columns={\"TotalValue\": \"TotalSpend\", \"TransactionID\": \"TransactionCount\", \"Price\": \"AvgPrice\"})\n",
    "\n",
    "# Ensure features are numerical and handle missing values if any\n",
    "customer_features = customer_features.fillna(0)\n",
    "\n",
    "# Compute similarity\n",
    "scaler = StandardScaler()\n",
    "scaled_features = scaler.fit_transform(customer_features)\n",
    "similarity_matrix = cosine_similarity(scaled_features)\n",
    "\n",
    "# Recommend top 3 lookalikes for each customer\n",
    "lookalikes = {}\n",
    "customer_ids = customer_features.index.tolist()\n",
    "for i, customer_id in enumerate(customer_ids):\n",
    "    similar_indices = np.argsort(-similarity_matrix[i])[1:4]  # Top 3 excluding self\n",
    "    lookalikes[customer_id] = [\n",
    "        (customer_ids[j], round(similarity_matrix[i, j], 4)) for j in similar_indices\n",
    "    ]\n",
    "\n",
    "# Save Lookalike results\n",
    "lookalike_df = pd.DataFrame({\n",
    "    \"CustomerID\": list(lookalikes.keys()),\n",
    "    \"Lookalikes\": [str(v) for v in lookalikes.values()]\n",
    "})\n",
    "lookalike_df.to_csv(\"Lookalike.csv\", index=False)\n",
    "\n",
    "# Task 3: Customer Segmentation (Clustering)\n",
    "# Prepare data for clustering\n",
    "clustering_data = customer_features.copy()\n",
    "scaled_clustering_data = scaler.fit_transform(clustering_data)\n",
    "\n",
    "# Apply KMeans clustering\n",
    "kmeans = KMeans(n_clusters=4, random_state=42)\n",
    "clusters = kmeans.fit_predict(scaled_clustering_data)\n",
    "clustering_data[\"Cluster\"] = clusters\n",
    "\n",
    "# Evaluate clustering\n",
    "db_index = davies_bouldin_score(scaled_clustering_data, clusters)\n",
    "\n",
    "# Visualize clusters\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.scatterplot(\n",
    "    x=clustering_data[\"TotalSpend\"],\n",
    "    y=clustering_data[\"TransactionCount\"],\n",
    "    hue=clustering_data[\"Cluster\"],\n",
    "    palette=\"viridis\",\n",
    "    legend=\"full\"\n",
    ")\n",
    "plt.title(\"Customer Clusters\")\n",
    "plt.xlabel(\"Total Spend\")\n",
    "plt.ylabel(\"Transaction Count\")\n",
    "plt.show()\n",
    "\n",
    "# Save clustering results\n",
    "clustering_data.to_csv(\"ClusteringResults.csv\", index=False)\n",
    "\n",
    "# Print summaries for review\n",
    "print(\"EDA Summary Statistics:\\n\", summary_stats)\n",
    "print(\"Top 5 Products by Sales:\\n\", top_products)\n",
    "print(\"Davies-Bouldin Index for Clustering:\", db_index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "da8bb81d-373f-4481-a0e5-51a43f764612",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"Column(s) ['Price'] do not exist\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[4], line 18\u001b[0m\n\u001b[0;32m     15\u001b[0m merged_data \u001b[38;5;241m=\u001b[39m transactions\u001b[38;5;241m.\u001b[39mmerge(customers, on\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCustomerID\u001b[39m\u001b[38;5;124m\"\u001b[39m)\u001b[38;5;241m.\u001b[39mmerge(products, on\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mProductID\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m     17\u001b[0m \u001b[38;5;66;03m# Feature engineering for clustering\u001b[39;00m\n\u001b[1;32m---> 18\u001b[0m customer_features \u001b[38;5;241m=\u001b[39m merged_data\u001b[38;5;241m.\u001b[39mgroupby(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCustomerID\u001b[39m\u001b[38;5;124m\"\u001b[39m)\u001b[38;5;241m.\u001b[39magg({\n\u001b[0;32m     19\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTotalValue\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msum\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m     20\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTransactionID\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mcount\u001b[39m\u001b[38;5;124m\"\u001b[39m,\n\u001b[0;32m     21\u001b[0m     \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPrice\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmean\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m     22\u001b[0m })\u001b[38;5;241m.\u001b[39mrename(columns\u001b[38;5;241m=\u001b[39m{\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTotalValue\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTotalSpend\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTransactionID\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mTransactionCount\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mPrice\u001b[39m\u001b[38;5;124m\"\u001b[39m: \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAvgPrice\u001b[39m\u001b[38;5;124m\"\u001b[39m})\n\u001b[0;32m     24\u001b[0m \u001b[38;5;66;03m# Ensure features are numerical and handle missing values if any\u001b[39;00m\n\u001b[0;32m     25\u001b[0m customer_features \u001b[38;5;241m=\u001b[39m customer_features\u001b[38;5;241m.\u001b[39mfillna(\u001b[38;5;241m0\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\groupby\\generic.py:1432\u001b[0m, in \u001b[0;36mDataFrameGroupBy.aggregate\u001b[1;34m(self, func, engine, engine_kwargs, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1429\u001b[0m     kwargs[\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mengine_kwargs\u001b[39m\u001b[38;5;124m\"\u001b[39m] \u001b[38;5;241m=\u001b[39m engine_kwargs\n\u001b[0;32m   1431\u001b[0m op \u001b[38;5;241m=\u001b[39m GroupByApply(\u001b[38;5;28mself\u001b[39m, func, args\u001b[38;5;241m=\u001b[39margs, kwargs\u001b[38;5;241m=\u001b[39mkwargs)\n\u001b[1;32m-> 1432\u001b[0m result \u001b[38;5;241m=\u001b[39m op\u001b[38;5;241m.\u001b[39magg()\n\u001b[0;32m   1433\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m is_dict_like(func) \u001b[38;5;129;01mand\u001b[39;00m result \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[0;32m   1434\u001b[0m     \u001b[38;5;66;03m# GH #52849\u001b[39;00m\n\u001b[0;32m   1435\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mas_index \u001b[38;5;129;01mand\u001b[39;00m is_list_like(func):\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:190\u001b[0m, in \u001b[0;36mApply.agg\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    187\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mapply_str()\n\u001b[0;32m    189\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_dict_like(func):\n\u001b[1;32m--> 190\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39magg_dict_like()\n\u001b[0;32m    191\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m is_list_like(func):\n\u001b[0;32m    192\u001b[0m     \u001b[38;5;66;03m# we require a list, but not a 'str'\u001b[39;00m\n\u001b[0;32m    193\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39magg_list_like()\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:423\u001b[0m, in \u001b[0;36mApply.agg_dict_like\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    415\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21magg_dict_like\u001b[39m(\u001b[38;5;28mself\u001b[39m) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m DataFrame \u001b[38;5;241m|\u001b[39m Series:\n\u001b[0;32m    416\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    417\u001b[0m \u001b[38;5;124;03m    Compute aggregation in the case of a dict-like argument.\u001b[39;00m\n\u001b[0;32m    418\u001b[0m \n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    421\u001b[0m \u001b[38;5;124;03m    Result of aggregation.\u001b[39;00m\n\u001b[0;32m    422\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[1;32m--> 423\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39magg_or_apply_dict_like(op_name\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124magg\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:1608\u001b[0m, in \u001b[0;36mGroupByApply.agg_or_apply_dict_like\u001b[1;34m(self, op_name)\u001b[0m\n\u001b[0;32m   1603\u001b[0m     kwargs\u001b[38;5;241m.\u001b[39mupdate({\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mengine\u001b[39m\u001b[38;5;124m\"\u001b[39m: engine, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mengine_kwargs\u001b[39m\u001b[38;5;124m\"\u001b[39m: engine_kwargs})\n\u001b[0;32m   1605\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m com\u001b[38;5;241m.\u001b[39mtemp_setattr(\n\u001b[0;32m   1606\u001b[0m     obj, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas_index\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;28;01mTrue\u001b[39;00m, condition\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mhasattr\u001b[39m(obj, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mas_index\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m   1607\u001b[0m ):\n\u001b[1;32m-> 1608\u001b[0m     result_index, result_data \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcompute_dict_like(\n\u001b[0;32m   1609\u001b[0m         op_name, selected_obj, selection, kwargs\n\u001b[0;32m   1610\u001b[0m     )\n\u001b[0;32m   1611\u001b[0m result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mwrap_results_dict_like(selected_obj, result_index, result_data)\n\u001b[0;32m   1612\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m result\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:462\u001b[0m, in \u001b[0;36mApply.compute_dict_like\u001b[1;34m(self, op_name, selected_obj, selection, kwargs)\u001b[0m\n\u001b[0;32m    460\u001b[0m is_groupby \u001b[38;5;241m=\u001b[39m \u001b[38;5;28misinstance\u001b[39m(obj, (DataFrameGroupBy, SeriesGroupBy))\n\u001b[0;32m    461\u001b[0m func \u001b[38;5;241m=\u001b[39m cast(AggFuncTypeDict, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mfunc)\n\u001b[1;32m--> 462\u001b[0m func \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnormalize_dictlike_arg(op_name, selected_obj, func)\n\u001b[0;32m    464\u001b[0m is_non_unique_col \u001b[38;5;241m=\u001b[39m (\n\u001b[0;32m    465\u001b[0m     selected_obj\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m2\u001b[39m\n\u001b[0;32m    466\u001b[0m     \u001b[38;5;129;01mand\u001b[39;00m selected_obj\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnunique() \u001b[38;5;241m<\u001b[39m \u001b[38;5;28mlen\u001b[39m(selected_obj\u001b[38;5;241m.\u001b[39mcolumns)\n\u001b[0;32m    467\u001b[0m )\n\u001b[0;32m    469\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m selected_obj\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m    470\u001b[0m     \u001b[38;5;66;03m# key only used for output\u001b[39;00m\n",
      "File \u001b[1;32m~\\anaconda3\\Lib\\site-packages\\pandas\\core\\apply.py:663\u001b[0m, in \u001b[0;36mApply.normalize_dictlike_arg\u001b[1;34m(self, how, obj, func)\u001b[0m\n\u001b[0;32m    661\u001b[0m     cols \u001b[38;5;241m=\u001b[39m Index(\u001b[38;5;28mlist\u001b[39m(func\u001b[38;5;241m.\u001b[39mkeys()))\u001b[38;5;241m.\u001b[39mdifference(obj\u001b[38;5;241m.\u001b[39mcolumns, sort\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[0;32m    662\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(cols) \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m:\n\u001b[1;32m--> 663\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mColumn(s) \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlist\u001b[39m(cols)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m do not exist\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m    665\u001b[0m aggregator_types \u001b[38;5;241m=\u001b[39m (\u001b[38;5;28mlist\u001b[39m, \u001b[38;5;28mtuple\u001b[39m, \u001b[38;5;28mdict\u001b[39m)\n\u001b[0;32m    667\u001b[0m \u001b[38;5;66;03m# if we have a dict of any non-scalars\u001b[39;00m\n\u001b[0;32m    668\u001b[0m \u001b[38;5;66;03m# eg. {'A' : ['mean']}, normalize all to\u001b[39;00m\n\u001b[0;32m    669\u001b[0m \u001b[38;5;66;03m# be list-likes\u001b[39;00m\n\u001b[0;32m    670\u001b[0m \u001b[38;5;66;03m# Cannot use func.values() because arg may be a Series\u001b[39;00m\n",
      "\u001b[1;31mKeyError\u001b[0m: \"Column(s) ['Price'] do not exist\""
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import davies_bouldin_score, silhouette_score\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# Load the datasets\n",
    "customers = pd.read_csv(\"Customers.csv\")\n",
    "products = pd.read_csv(\"Products.csv\")\n",
    "transactions = pd.read_csv(\"Transactions.csv\")\n",
    "\n",
    "# Merge datasets for comprehensive analysis\n",
    "merged_data = transactions.merge(customers, on=\"CustomerID\").merge(products, on=\"ProductID\")\n",
    "\n",
    "# Feature engineering for clustering\n",
    "customer_features = merged_data.groupby(\"CustomerID\").agg({\n",
    "    \"TotalValue\": \"sum\",\n",
    "    \"TransactionID\": \"count\",\n",
    "    \"Price\": \"mean\"\n",
    "}).rename(columns={\"TotalValue\": \"TotalSpend\", \"TransactionID\": \"TransactionCount\", \"Price\": \"AvgPrice\"})\n",
    "\n",
    "# Ensure features are numerical and handle missing values if any\n",
    "customer_features = customer_features.fillna(0)\n",
    "\n",
    "# Standardize features\n",
    "scaler = StandardScaler()\n",
    "scaled_features = scaler.fit_transform(customer_features)\n",
    "\n",
    "# Apply KMeans clustering\n",
    "n_clusters = 4  # You can adjust this between 2 and 10\n",
    "kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n",
    "clusters = kmeans.fit_predict(scaled_features)\n",
    "customer_features[\"Cluster\"] = clusters\n",
    "\n",
    "# Evaluate clustering\n",
    "db_index = davies_bouldin_score(scaled_features, clusters)\n",
    "silhouette_avg = silhouette_score(scaled_features, clusters)\n",
    "\n",
    "# Visualize clusters\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.scatterplot(\n",
    "    x=customer_features[\"TotalSpend\"],\n",
    "    y=customer_features[\"TransactionCount\"],\n",
    "    hue=customer_features[\"Cluster\"],\n",
    "    palette=\"viridis\",\n",
    "    legend=\"full\"\n",
    ")\n",
    "plt.title(\"Customer Clusters\")\n",
    "plt.xlabel(\"Total Spend\")\n",
    "plt.ylabel(\"Transaction Count\")\n",
    "plt.show()\n",
    "\n",
    "# Save clustering results\n",
    "customer_features.to_csv(\"ClusteringResults.csv\", index=False)\n",
    "\n",
    "# Print clustering evaluation metrics\n",
    "print(f\"Number of Clusters: {n_clusters}\")\n",
    "print(f\"Davies-Bouldin Index: {db_index}\")\n",
    "print(f\"Silhouette Score: {silhouette_avg}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "947afc23-a2b4-47d5-a4ae-2a9534aa79e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error creating customer features: \"Column(s) ['Price'] do not exist\"\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import davies_bouldin_score\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "\n",
    "# Suppress warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "def load_and_merge_data():\n",
    "    \"\"\"Load and merge the datasets\"\"\"\n",
    "    try:\n",
    "        # Load datasets\n",
    "        customers = pd.read_csv(\"Customers.csv\")\n",
    "        products = pd.read_csv(\"Products.csv\")\n",
    "        transactions = pd.read_csv(\"Transactions.csv\")\n",
    "        \n",
    "        # Merge datasets\n",
    "        merged_data = (transactions.merge(customers, on=\"CustomerID\", how='left')\n",
    "                      .merge(products, on=\"ProductID\", how='left'))\n",
    "        \n",
    "        # Handle missing values\n",
    "        merged_data = merged_data.dropna()\n",
    "        \n",
    "        return customers, products, transactions, merged_data\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(f\"Error loading data: {str(e)}\")\n",
    "        return None, None, None, None\n",
    "\n",
    "def perform_eda(merged_data):\n",
    "    \"\"\"Perform exploratory data analysis\"\"\"\n",
    "    try:\n",
    "        # Calculate basic statistics\n",
    "        summary_stats = merged_data.describe()\n",
    "        sales_by_region = merged_data.groupby(\"Region\")[\"TotalValue\"].sum()\n",
    "        top_products = (merged_data.groupby(\"ProductName\")[\"TotalValue\"]\n",
    "                       .sum()\n",
    "                       .sort_values(ascending=False)\n",
    "                       .head(5))\n",
    "        \n",
    "        # Create visualization\n",
    "        plt.figure(figsize=(12, 6))\n",
    "        sns.barplot(x=sales_by_region.index, y=sales_by_region.values)\n",
    "        plt.title(\"Total Sales by Region\")\n",
    "        plt.xlabel(\"Region\")\n",
    "        plt.ylabel(\"Total Sales\")\n",
    "        plt.xticks(rotation=45)\n",
    "        plt.tight_layout()\n",
    "        plt.savefig(\"sales_by_region.png\")\n",
    "        plt.close()\n",
    "        \n",
    "        return summary_stats, sales_by_region, top_products\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(f\"Error in EDA: {str(e)}\")\n",
    "        return None, None, None\n",
    "\n",
    "def create_customer_features(merged_data):\n",
    "    \"\"\"Create features for customer analysis\"\"\"\n",
    "    try:\n",
    "        customer_features = merged_data.groupby(\"CustomerID\").agg({\n",
    "            \"TotalValue\": \"sum\",\n",
    "            \"TransactionID\": \"count\",\n",
    "            \"Price\": \"mean\"\n",
    "        }).rename(columns={\n",
    "            \"TotalValue\": \"TotalSpend\",\n",
    "            \"TransactionID\": \"TransactionCount\",\n",
    "            \"Price\": \"AvgPrice\"\n",
    "        })\n",
    "        \n",
    "        return customer_features\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(f\"Error creating customer features: {str(e)}\")\n",
    "        return None\n",
    "\n",
    "def build_lookalike_model(customer_features):\n",
    "    \"\"\"Build the lookalike model\"\"\"\n",
    "    try:\n",
    "        # Scale features\n",
    "        scaler = StandardScaler()\n",
    "        scaled_features = scaler.fit_transform(customer_features)\n",
    "        \n",
    "        # Calculate similarity\n",
    "        similarity_matrix = cosine_similarity(scaled_features)\n",
    "        \n",
    "        # Generate lookalikes\n",
    "        lookalikes = {}\n",
    "        customer_ids = customer_features.index.tolist()\n",
    "        \n",
    "        for i, customer_id in enumerate(customer_ids):\n",
    "            similar_indices = np.argsort(-similarity_matrix[i])[1:4]\n",
    "            lookalikes[customer_id] = [\n",
    "                (customer_ids[j], float(round(similarity_matrix[i, j], 4)))\n",
    "                for j in similar_indices\n",
    "            ]\n",
    "        \n",
    "        # Create and save results\n",
    "        lookalike_df = pd.DataFrame({\n",
    "            \"CustomerID\": list(lookalikes.keys()),\n",
    "            \"Lookalikes\": [str(v) for v in lookalikes.values()]\n",
    "        })\n",
    "        lookalike_df.to_csv(\"FirstName_LastName_Lookalike.csv\", index=False)\n",
    "        \n",
    "        return lookalikes, lookalike_df\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(f\"Error building lookalike model: {str(e)}\")\n",
    "        return None, None\n",
    "\n",
    "def perform_clustering(customer_features):\n",
    "    \"\"\"Perform customer segmentation\"\"\"\n",
    "    try:\n",
    "        # Prepare data\n",
    "        clustering_data = customer_features.copy()\n",
    "        scaler = StandardScaler()\n",
    "        scaled_clustering_data = scaler.fit_transform(clustering_data)\n",
    "        \n",
    "        # Find optimal number of clusters\n",
    "        n_clusters_range = range(2, 11)\n",
    "        db_scores = []\n",
    "        \n",
    "        for n_clusters in n_clusters_range:\n",
    "            kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)\n",
    "            clusters = kmeans.fit_predict(scaled_clustering_data)\n",
    "            db_score = davies_bouldin_score(scaled_clustering_data, clusters)\n",
    "            db_scores.append(db_score)\n",
    "        \n",
    "        # Select optimal number of clusters\n",
    "        optimal_clusters = n_clusters_range[np.argmin(db_scores)]\n",
    "        \n",
    "        # Final clustering with optimal number\n",
    "        kmeans = KMeans(n_clusters=optimal_clusters, random_state=42, n_init=10)\n",
    "        clusters = kmeans.fit_predict(scaled_clustering_data)\n",
    "        clustering_data[\"Cluster\"] = clusters\n",
    "        \n",
    "        # Calculate Davies-Bouldin Index\n",
    "        db_index = davies_bouldin_score(scaled_clustering_data, clusters)\n",
    "        \n",
    "        # Create visualization\n",
    "        plt.figure(figsize=(10, 6))\n",
    "        sns.scatterplot(\n",
    "            data=clustering_data,\n",
    "            x=\"TotalSpend\",\n",
    "            y=\"TransactionCount\",\n",
    "            hue=\"Cluster\",\n",
    "            palette=\"viridis\",\n",
    "            legend=\"full\"\n",
    "        )\n",
    "        plt.title(f\"Customer Clusters (n={optimal_clusters})\")\n",
    "        plt.xlabel(\"Total Spend\")\n",
    "        plt.ylabel(\"Transaction Count\")\n",
    "        plt.tight_layout()\n",
    "        plt.savefig(\"customer_clusters.png\")\n",
    "        plt.close()\n",
    "        \n",
    "        # Save clustering results\n",
    "        clustering_data.to_csv(\"FirstName_LastName_Clustering.csv\", index=True)\n",
    "        \n",
    "        return clustering_data, db_index, optimal_clusters\n",
    "    \n",
    "    except Exception as e:\n",
    "        print(f\"Error performing clustering: {str(e)}\")\n",
    "        return None, None, None\n",
    "\n",
    "def main():\n",
    "    \"\"\"Main execution function\"\"\"\n",
    "    try:\n",
    "        # Load and merge data\n",
    "        customers, products, transactions, merged_data = load_and_merge_data()\n",
    "        if merged_data is None:\n",
    "            return\n",
    "        \n",
    "        # Perform EDA\n",
    "        summary_stats, sales_by_region, top_products = perform_eda(merged_data)\n",
    "        if summary_stats is None:\n",
    "            return\n",
    "        \n",
    "        # Create customer features\n",
    "        customer_features = create_customer_features(merged_data)\n",
    "        if customer_features is None:\n",
    "            return\n",
    "        \n",
    "        # Build lookalike model\n",
    "        lookalikes, lookalike_df = build_lookalike_model(customer_features)\n",
    "        if lookalikes is None:\n",
    "            return\n",
    "        \n",
    "        # Perform clustering\n",
    "        clustering_data, db_index, optimal_clusters = perform_clustering(customer_features)\n",
    "        if clustering_data is None:\n",
    "            return\n",
    "        \n",
    "        # Print summaries\n",
    "        print(\"\\nEDA Summary Statistics:\")\n",
    "        print(summary_stats)\n",
    "        print(\"\\nTop 5 Products by Sales:\")\n",
    "        print(top_products)\n",
    "        print(f\"\\nDavies-Bouldin Index for Clustering: {db_index:.4f}\")\n",
    "        print(f\"Optimal number of clusters: {optimal_clusters}\")\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(f\"Error in main execution: {str(e)}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "db457a7f-1ad6-445a-8f7d-8e344da8d047",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Analysis Complete!\n",
      "\n",
      "Total Customers: 200\n",
      "Total Products: 100\n",
      "Total Transactions: 1000\n",
      "\n",
      "Optimal Number of Clusters: 9\n",
      "Davies-Bouldin Index: 1.0298\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import davies_bouldin_score\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "from datetime import datetime\n",
    "\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "def load_data():\n",
    "    \"\"\"Load datasets with proper data types and date parsing\"\"\"\n",
    "    try:\n",
    "        # Load Customers with proper date parsing\n",
    "        customers = pd.read_csv(\"Customers.csv\", dtype={\n",
    "            'CustomerID': str,\n",
    "            'CustomerName': str,\n",
    "            'Region': str\n",
    "        }, parse_dates=['SignupDate'])\n",
    "\n",
    "        # Load Products\n",
    "        products = pd.read_csv(\"Products.csv\", dtype={\n",
    "            'ProductID': str,\n",
    "            'ProductName': str,\n",
    "            'Category': str,\n",
    "            'Price': float\n",
    "        })\n",
    "\n",
    "        # Load Transactions with proper date parsing\n",
    "        transactions = pd.read_csv(\"Transactions.csv\", dtype={\n",
    "            'TransactionID': str,\n",
    "            'CustomerID': str,\n",
    "            'ProductID': str,\n",
    "            'Quantity': int,\n",
    "            'TotalValue': float,\n",
    "            'Price': float\n",
    "        }, parse_dates=['TransactionDate'])\n",
    "\n",
    "        return customers, products, transactions\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error loading data: {str(e)}\")\n",
    "        return None, None, None\n",
    "\n",
    "def perform_eda(customers, products, transactions):\n",
    "    \"\"\"Perform EDA focusing on key business metrics\"\"\"\n",
    "    try:\n",
    "        # 1. Customer Analysis\n",
    "        customer_metrics = {\n",
    "            'total_customers': len(customers),\n",
    "            'customers_by_region': customers['Region'].value_counts(),\n",
    "            'avg_customer_age_days': (datetime.now() - customers['SignupDate']).mean().days,\n",
    "            'customers_by_signup_year': customers['SignupDate'].dt.year.value_counts().sort_index()\n",
    "        }\n",
    "\n",
    "        # 2. Product Analysis\n",
    "        product_metrics = {\n",
    "            'total_products': len(products),\n",
    "            'categories': products['Category'].value_counts(),\n",
    "            'price_range': {\n",
    "                'min': products['Price'].min(),\n",
    "                'max': products['Price'].max(),\n",
    "                'mean': products['Price'].mean()\n",
    "            },\n",
    "            'products_by_category': products.groupby('Category')['Price'].agg(['count', 'mean'])\n",
    "        }\n",
    "\n",
    "        # 3. Transaction Analysis\n",
    "        transaction_metrics = {\n",
    "            'total_transactions': len(transactions),\n",
    "            'total_revenue': transactions['TotalValue'].sum(),\n",
    "            'avg_transaction_value': transactions['TotalValue'].mean(),\n",
    "            'total_quantity_sold': transactions['Quantity'].sum(),\n",
    "            'sales_by_month': transactions.groupby(transactions['TransactionDate'].dt.to_period('M'))['TotalValue'].sum()\n",
    "        }\n",
    "\n",
    "        # Visualizations\n",
    "        # 1. Sales Trend\n",
    "        plt.figure(figsize=(12, 6))\n",
    "        transaction_metrics['sales_by_month'].plot(kind='line')\n",
    "        plt.title('Monthly Sales Trend')\n",
    "        plt.xlabel('Month')\n",
    "        plt.ylabel('Total Sales')\n",
    "        plt.xticks(rotation=45)\n",
    "        plt.tight_layout()\n",
    "        plt.savefig('sales_trend.png')\n",
    "        plt.close()\n",
    "\n",
    "        # 2. Category Distribution\n",
    "        plt.figure(figsize=(10, 6))\n",
    "        product_metrics['categories'].plot(kind='bar')\n",
    "        plt.title('Product Distribution by Category')\n",
    "        plt.xlabel('Category')\n",
    "        plt.ylabel('Number of Products')\n",
    "        plt.xticks(rotation=45)\n",
    "        plt.tight_layout()\n",
    "        plt.savefig('category_distribution.png')\n",
    "        plt.close()\n",
    "\n",
    "        return customer_metrics, product_metrics, transaction_metrics\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error in EDA: {str(e)}\")\n",
    "        return None, None, None\n",
    "\n",
    "def create_customer_features(customers, transactions):\n",
    "    \"\"\"Create comprehensive customer features for modeling\"\"\"\n",
    "    try:\n",
    "        # Calculate customer metrics\n",
    "        customer_features = transactions.groupby('CustomerID').agg({\n",
    "            'TransactionID': 'count',  # Number of transactions\n",
    "            'TotalValue': ['sum', 'mean'],  # Spending patterns\n",
    "            'Quantity': ['sum', 'mean'],  # Buying patterns\n",
    "            'TransactionDate': ['min', 'max']  # Customer lifecycle\n",
    "        }).reset_index()\n",
    "\n",
    "        # Flatten column names\n",
    "        customer_features.columns = [\n",
    "            'CustomerID', 'transaction_count', 'total_spend', 'avg_transaction_value',\n",
    "            'total_quantity', 'avg_quantity', 'first_purchase', 'last_purchase'\n",
    "        ]\n",
    "\n",
    "        # Add customer profile information\n",
    "        customer_features = customer_features.merge(\n",
    "            customers[['CustomerID', 'Region', 'SignupDate']], \n",
    "            on='CustomerID'\n",
    "        )\n",
    "\n",
    "        # Calculate derived features\n",
    "        customer_features['account_age_days'] = (\n",
    "            customer_features['last_purchase'] - customer_features['SignupDate']\n",
    "        ).dt.days\n",
    "        customer_features['purchase_frequency'] = customer_features['transaction_count'] / \\\n",
    "                                                customer_features['account_age_days']\n",
    "\n",
    "        # Handle infinite values\n",
    "        customer_features = customer_features.replace([np.inf, -np.inf], np.nan)\n",
    "        customer_features = customer_features.fillna(0)\n",
    "\n",
    "        # Convert Region to dummy variables\n",
    "        customer_features = pd.get_dummies(customer_features, columns=['Region'], prefix='region')\n",
    "\n",
    "        return customer_features\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error creating customer features: {str(e)}\")\n",
    "        return None\n",
    "\n",
    "def build_lookalike_model(customer_features, n_recommendations=3):\n",
    "    \"\"\"Build lookalike model with enhanced similarity metrics\"\"\"\n",
    "    try:\n",
    "        # Select features for similarity calculation\n",
    "        similarity_features = customer_features.drop(\n",
    "            ['CustomerID', 'first_purchase', 'last_purchase', 'SignupDate'], \n",
    "            axis=1\n",
    "        )\n",
    "\n",
    "        # Scale features\n",
    "        scaler = StandardScaler()\n",
    "        scaled_features = scaler.fit_transform(similarity_features)\n",
    "\n",
    "        # Calculate similarity\n",
    "        similarity_matrix = cosine_similarity(scaled_features)\n",
    "\n",
    "        # Generate recommendations\n",
    "        lookalikes = {}\n",
    "        customer_ids = customer_features['CustomerID'].tolist()\n",
    "\n",
    "        for i, customer_id in enumerate(customer_ids[:20]):  # First 20 customers as required\n",
    "            similar_indices = np.argsort(-similarity_matrix[i])[1:n_recommendations+1]\n",
    "            lookalikes[customer_id] = [\n",
    "                (customer_ids[j], float(round(similarity_matrix[i, j], 4)))\n",
    "                for j in similar_indices\n",
    "            ]\n",
    "\n",
    "        # Save results\n",
    "        lookalike_results = []\n",
    "        for cust_id, recommendations in lookalikes.items():\n",
    "            for rec_id, score in recommendations:\n",
    "                lookalike_results.append({\n",
    "                    'customer_id': cust_id,\n",
    "                    'similar_customer_id': rec_id,\n",
    "                    'similarity_score': score\n",
    "                })\n",
    "\n",
    "        lookalike_df = pd.DataFrame(lookalike_results)\n",
    "        lookalike_df.to_csv('FirstName_LastName_Lookalike.csv', index=False)\n",
    "\n",
    "        return lookalikes, lookalike_df\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error building lookalike model: {str(e)}\")\n",
    "        return None, None\n",
    "\n",
    "def perform_clustering(customer_features):\n",
    "    \"\"\"Perform customer segmentation with optimal cluster selection\"\"\"\n",
    "    try:\n",
    "        # Prepare features for clustering\n",
    "        cluster_features = customer_features.drop(\n",
    "            ['CustomerID', 'first_purchase', 'last_purchase', 'SignupDate'], \n",
    "            axis=1\n",
    "        )\n",
    "\n",
    "        # Scale features\n",
    "        scaler = StandardScaler()\n",
    "        scaled_features = scaler.fit_transform(cluster_features)\n",
    "\n",
    "        # Find optimal number of clusters\n",
    "        min_clusters, max_clusters = 2, 10\n",
    "        db_scores = []\n",
    "        models = {}\n",
    "\n",
    "        for n_clusters in range(min_clusters, max_clusters + 1):\n",
    "            kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)\n",
    "            labels = kmeans.fit_predict(scaled_features)\n",
    "            db_score = davies_bouldin_score(scaled_features, labels)\n",
    "            db_scores.append(db_score)\n",
    "            models[n_clusters] = kmeans\n",
    "\n",
    "        # Select optimal number of clusters\n",
    "        optimal_clusters = min_clusters + np.argmin(db_scores)\n",
    "        best_model = models[optimal_clusters]\n",
    "\n",
    "        # Final clustering\n",
    "        cluster_labels = best_model.predict(scaled_features)\n",
    "        customer_features['Cluster'] = cluster_labels\n",
    "\n",
    "        # Analyze clusters\n",
    "        cluster_analysis = customer_features.groupby('Cluster').agg({\n",
    "            'total_spend': 'mean',\n",
    "            'transaction_count': 'mean',\n",
    "            'avg_transaction_value': 'mean',\n",
    "            'purchase_frequency': 'mean'\n",
    "        })\n",
    "\n",
    "        # Save results\n",
    "        customer_features.to_csv('FirstName_LastName_Clustering.csv', index=False)\n",
    "\n",
    "        return customer_features, db_scores[optimal_clusters-min_clusters], optimal_clusters, cluster_analysis\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error performing clustering: {str(e)}\")\n",
    "        return None, None, None, None\n",
    "\n",
    "def main():\n",
    "    \"\"\"Main execution function\"\"\"\n",
    "    try:\n",
    "        # Load data\n",
    "        customers, products, transactions = load_data()\n",
    "        if any(df is None for df in [customers, products, transactions]):\n",
    "            return\n",
    "\n",
    "        # Perform EDA\n",
    "        customer_metrics, product_metrics, transaction_metrics = perform_eda(\n",
    "            customers, products, transactions\n",
    "        )\n",
    "        if any(metric is None for metric in [customer_metrics, product_metrics, transaction_metrics]):\n",
    "            return\n",
    "\n",
    "        # Create customer features\n",
    "        customer_features = create_customer_features(customers, transactions)\n",
    "        if customer_features is None:\n",
    "            return\n",
    "\n",
    "        # Build lookalike model\n",
    "        lookalikes, lookalike_df = build_lookalike_model(customer_features)\n",
    "        if lookalikes is None:\n",
    "            return\n",
    "\n",
    "        # Perform clustering\n",
    "        clustering_results, db_index, optimal_clusters, cluster_analysis = perform_clustering(\n",
    "            customer_features\n",
    "        )\n",
    "        if clustering_results is None:\n",
    "            return\n",
    "\n",
    "        # Print summary results\n",
    "        print(\"\\nAnalysis Complete!\")\n",
    "        print(f\"\\nTotal Customers: {customer_metrics['total_customers']}\")\n",
    "        print(f\"Total Products: {product_metrics['total_products']}\")\n",
    "        print(f\"Total Transactions: {transaction_metrics['total_transactions']}\")\n",
    "        print(f\"\\nOptimal Number of Clusters: {optimal_clusters}\")\n",
    "        print(f\"Davies-Bouldin Index: {db_index:.4f}\")\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error in main execution: {str(e)}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a8958d93-406e-40ae-84f4-0b5c983f0a57",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.cluster import KMeans\n",
    "from sklearn.metrics import davies_bouldin_score\n",
    "from sklearn.metrics.pairwise import cosine_similarity\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "from datetime import datetime\n",
    "\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "def load_data():\n",
    "    \"\"\"Load datasets with proper data types and date parsing\"\"\"\n",
    "    try:\n",
    "        # Load Customers with proper date parsing\n",
    "        customers = pd.read_csv(\"Customers.csv\", dtype={\n",
    "            'CustomerID': str,\n",
    "            'CustomerName': str,\n",
    "            'Region': str\n",
    "        }, parse_dates=['SignupDate'])\n",
    "\n",
    "        # Load Products\n",
    "        products = pd.read_csv(\"Products.csv\", dtype={\n",
    "            'ProductID': str,\n",
    "            'ProductName': str,\n",
    "            'Category': str,\n",
    "            'Price': float\n",
    "        })\n",
    "\n",
    "        # Load Transactions with proper date parsing\n",
    "        transactions = pd.read_csv(\"Transactions.csv\", dtype={\n",
    "            'TransactionID': str,\n",
    "            'CustomerID': str,\n",
    "            'ProductID': str,\n",
    "            'Quantity': int,\n",
    "            'TotalValue': float,\n",
    "            'Price': float\n",
    "        }, parse_dates=['TransactionDate'])\n",
    "\n",
    "        return customers, products, transactions\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error loading data: {str(e)}\")\n",
    "        return None, None, None\n",
    "\n",
    "def perform_eda(customers, products, transactions):\n",
    "    \"\"\"Perform EDA focusing on key business metrics\"\"\"\n",
    "    try:\n",
    "        # 1. Customer Analysis\n",
    "        customer_metrics = {\n",
    "            'total_customers': len(customers),\n",
    "            'customers_by_region': customers['Region'].value_counts(),\n",
    "            'avg_customer_age_days': (datetime.now() - customers['SignupDate']).mean().days,\n",
    "            'customers_by_signup_year': customers['SignupDate'].dt.year.value_counts().sort_index()\n",
    "        }\n",
    "\n",
    "        # 2. Product Analysis\n",
    "        product_metrics = {\n",
    "            'total_products': len(products),\n",
    "            'categories': products['Category'].value_counts(),\n",
    "            'price_range': {\n",
    "                'min': products['Price'].min(),\n",
    "                'max': products['Price'].max(),\n",
    "                'mean': products['Price'].mean()\n",
    "            },\n",
    "            'products_by_category': products.groupby('Category')['Price'].agg(['count', 'mean'])\n",
    "        }\n",
    "\n",
    "        # 3. Transaction Analysis\n",
    "        transaction_metrics = {\n",
    "            'total_transactions': len(transactions),\n",
    "            'total_revenue': transactions['TotalValue'].sum(),\n",
    "            'avg_transaction_value': transactions['TotalValue'].mean(),\n",
    "            'total_quantity_sold': transactions['Quantity'].sum(),\n",
    "            'sales_by_month': transactions.groupby(transactions['TransactionDate'].dt.to_period('M'))['TotalValue'].sum()\n",
    "        }\n",
    "\n",
    "        # Visualizations\n",
    "        # 1. Sales Trend\n",
    "        plt.figure(figsize=(12, 6))\n",
    "        transaction_metrics['sales_by_month'].plot(kind='line')\n",
    "        plt.title('Monthly Sales Trend')\n",
    "        plt.xlabel('Month')\n",
    "        plt.ylabel('Total Sales')\n",
    "        plt.xticks(rotation=45)\n",
    "        plt.tight_layout()\n",
    "        plt.savefig('sales_trend.png')\n",
    "        plt.close()\n",
    "\n",
    "        # 2. Category Distribution\n",
    "        plt.figure(figsize=(10, 6))\n",
    "        product_metrics['categories'].plot(kind='bar')\n",
    "        plt.title('Product Distribution by Category')\n",
    "        plt.xlabel('Category')\n",
    "        plt.ylabel('Number of Products')\n",
    "        plt.xticks(rotation=45)\n",
    "        plt.tight_layout()\n",
    "        plt.savefig('category_distribution.png')\n",
    "        plt.close()\n",
    "\n",
    "        return customer_metrics, product_metrics, transaction_metrics\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error in EDA: {str(e)}\")\n",
    "        return None, None, None\n",
    "\n",
    "def create_customer_features(customers, transactions):\n",
    "    \"\"\"Create comprehensive customer features for modeling\"\"\"\n",
    "    try:\n",
    "        # Calculate customer metrics\n",
    "        customer_features = transactions.groupby('CustomerID').agg({\n",
    "            'TransactionID': 'count',  # Number of transactions\n",
    "            'TotalValue': ['sum', 'mean'],  # Spending patterns\n",
    "            'Quantity': ['sum', 'mean'],  # Buying patterns\n",
    "            'TransactionDate': ['min', 'max']  # Customer lifecycle\n",
    "        }).reset_index()\n",
    "\n",
    "        # Flatten column names\n",
    "        customer_features.columns = [\n",
    "            'CustomerID', 'transaction_count', 'total_spend', 'avg_transaction_value',\n",
    "            'total_quantity', 'avg_quantity', 'first_purchase', 'last_purchase'\n",
    "        ]\n",
    "\n",
    "        # Add customer profile information\n",
    "        customer_features = customer_features.merge(\n",
    "            customers[['CustomerID', 'Region', 'SignupDate']], \n",
    "            on='CustomerID'\n",
    "        )\n",
    "\n",
    "        # Calculate derived features\n",
    "        customer_features['account_age_days'] = (\n",
    "            customer_features['last_purchase'] - customer_features['SignupDate']\n",
    "        ).dt.days\n",
    "        customer_features['purchase_frequency'] = customer_features['transaction_count'] / \\\n",
    "                                                customer_features['account_age_days']\n",
    "\n",
    "        # Handle infinite values\n",
    "        customer_features = customer_features.replace([np.inf, -np.inf], np.nan)\n",
    "        customer_features = customer_features.fillna(0)\n",
    "\n",
    "        # Convert Region to dummy variables\n",
    "        customer_features = pd.get_dummies(customer_features, columns=['Region'], prefix='region')\n",
    "\n",
    "        return customer_features\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error creating customer features: {str(e)}\")\n",
    "        return None\n",
    "\n",
    "def build_lookalike_model(customer_features, n_recommendations=3):\n",
    "    \"\"\"Build lookalike model with enhanced similarity metrics\"\"\"\n",
    "    try:\n",
    "        # Select features for similarity calculation\n",
    "        similarity_features = customer_features.drop(\n",
    "            ['CustomerID', 'first_purchase', 'last_purchase', 'SignupDate'], \n",
    "            axis=1\n",
    "        )\n",
    "\n",
    "        # Scale features\n",
    "        scaler = StandardScaler()\n",
    "        scaled_features = scaler.fit_transform(similarity_features)\n",
    "\n",
    "        # Calculate similarity\n",
    "        similarity_matrix = cosine_similarity(scaled_features)\n",
    "\n",
    "        # Generate recommendations\n",
    "        lookalikes = {}\n",
    "        customer_ids = customer_features['CustomerID'].tolist()\n",
    "\n",
    "        for i, customer_id in enumerate(customer_ids[:20]):  # First 20 customers as required\n",
    "            similar_indices = np.argsort(-similarity_matrix[i])[1:n_recommendations+1]\n",
    "            lookalikes[customer_id] = [\n",
    "                (customer_ids[j], float(round(similarity_matrix[i, j], 4)))\n",
    "                for j in similar_indices\n",
    "            ]\n",
    "\n",
    "        # Save results\n",
    "        lookalike_results = []\n",
    "        for cust_id, recommendations in lookalikes.items():\n",
    "            for rec_id, score in recommendations:\n",
    "                lookalike_results.append({\n",
    "                    'customer_id': cust_id,\n",
    "                    'similar_customer_id': rec_id,\n",
    "                    'similarity_score': score\n",
    "                })\n",
    "\n",
    "        lookalike_df = pd.DataFrame(lookalike_results)\n",
    "        lookalike_df.to_csv('FirstName_LastName_Lookalike.csv', index=False)\n",
    "\n",
    "        return lookalikes, lookalike_df\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error building lookalike model: {str(e)}\")\n",
    "        return None, None\n",
    "\n",
    "def perform_clustering(customer_features):\n",
    "    \"\"\"Perform customer segmentation with optimal cluster selection\"\"\"\n",
    "    try:\n",
    "        # Prepare features for clustering\n",
    "        cluster_features = customer_features.drop(\n",
    "            ['CustomerID', 'first_purchase', 'last_purchase', 'SignupDate'], \n",
    "            axis=1\n",
    "        )\n",
    "\n",
    "        # Scale features\n",
    "        scaler = StandardScaler()\n",
    "        scaled_features = scaler.fit_transform(cluster_features)\n",
    "\n",
    "        # Find optimal number of clusters\n",
    "        min_clusters, max_clusters = 2, 10\n",
    "        db_scores = []\n",
    "        models = {}\n",
    "\n",
    "        for n_clusters in range(min_clusters, max_clusters + 1):\n",
    "            kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)\n",
    "            labels = kmeans.fit_predict(scaled_features)\n",
    "            db_score = davies_bouldin_score(scaled_features, labels)\n",
    "            db_scores.append(db_score)\n",
    "            models[n_clusters] = kmeans\n",
    "\n",
    "        # Select optimal number of clusters\n",
    "        optimal_clusters = min_clusters + np.argmin(db_scores)\n",
    "        best_model = models[optimal_clusters]\n",
    "\n",
    "        # Final clustering\n",
    "        cluster_labels = best_model.predict(scaled_features)\n",
    "        customer_features['Cluster'] = cluster_labels\n",
    "\n",
    "        # Analyze clusters\n",
    "        cluster_analysis = customer_features.groupby('Cluster').agg({\n",
    "            'total_spend': 'mean',\n",
    "            'transaction_count': 'mean',\n",
    "            'avg_transaction_value': 'mean',\n",
    "            'purchase_frequency': 'mean'\n",
    "        })\n",
    "\n",
    "        # Save results\n",
    "        customer_features.to_csv('FirstName_LastName_Clustering.csv', index=False)\n",
    "\n",
    "        return customer_features, db_scores[optimal_clusters-min_clusters], optimal_clusters, cluster_analysis\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error performing clustering: {str(e)}\")\n",
    "        return None, None, None, None\n",
    "\n",
    "def main():\n",
    "    \"\"\"Main execution function\"\"\"\n",
    "    try:\n",
    "        # Load data\n",
    "        customers, products, transactions = load_data()\n",
    "        if any(df is None for df in [customers, products, transactions]):\n",
    "            return\n",
    "\n",
    "        # Perform EDA\n",
    "        customer_metrics, product_metrics, transaction_metrics = perform_eda(\n",
    "            customers, products, transactions\n",
    "        )\n",
    "        if any(metric is None for metric in [customer_metrics, product_metrics, transaction_metrics]):\n",
    "            return\n",
    "\n",
    "        # Create customer features\n",
    "        customer_features = create_customer_features(customers, transactions)\n",
    "        if customer_features is None:\n",
    "            return\n",
    "\n",
    "        # Build lookalike model\n",
    "        lookalikes, lookalike_df = build_lookalike_model(customer_features)\n",
    "        if lookalikes is None:\n",
    "            return\n",
    "\n",
    "        # Perform clustering\n",
    "        clustering_results, db_index, optimal_clusters, cluster_analysis = perform_clustering(\n",
    "            customer_features\n",
    "        )\n",
    "        if clustering_results is None:\n",
    "            return\n",
    "\n",
    "        # Print summary results\n",
    "        print(\"\\nAnalysis Complete!\")\n",
    "        print(f\"\\nTotal Customers: {customer_metrics['total_customers']}\")\n",
    "        print(f\"Total Products: {product_metrics['total_products']}\")\n",
    "        print(f\"Total Transactions: {transaction_metrics['total_transactions']}\")\n",
    "        print(f\"\\nOptimal Number of Clusters: {optimal_clusters}\")\n",
    "        print(f\"Davies-Bouldin Index: {db_index:.4f}\")\n",
    "\n",
    "    except Exception as e:\n",
    "        print(f\"Error in main execution: {str(e)}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed0d3632-52f7-47a8-90eb-c938f37f39be",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
